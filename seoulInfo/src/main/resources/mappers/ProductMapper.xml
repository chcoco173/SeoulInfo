<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.ProductDAO">

	<!-- 상품등록 -->
	<insert id="insertProduct" parameterType="ProductVO">
		INSERT INTO
		product_sale
		(
		sale_cate,
		sale_name,
		sale_descript,
		sale_price,
		sale_regdate,
		member_id,
		sale_area

		)
		VALUES
		(
		#{sale_cate},
		#{sale_name},
		#{sale_descript},
		#{sale_price},
		now(),
		#{member_id},
		#{sale_area}

		)
	</insert>

	<!-- 상품등록한 최근 상품pk 값 가져오기 -->
	<select id="productNum" resultType='integer'>
		SELECT sale_id
		FROM
		product_sale
		ORDER BY sale_id DESC
		limit 1
	</select>

	<!-- productMainList main + ml -->
	<select id="productMainList" resultType="java.util.Map"
		parameterType="hashmap">
		SELECT
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price,
		ps.sale_area,
		ps.sale_regdate,
		ps.sale_viewcount,
		MAX(pi.productimg_url) AS
		productimg_url,
		MAX(pi.productimg_alias) AS productimg_alias,
		COUNT(DISTINCT fp.member_id) AS favorite_count
		FROM
		product_sale ps
		LEFT
		OUTER JOIN
		product_image pi ON ps.sale_id = pi.sale_id
		LEFT OUTER JOIN
		favorite_product fp ON ps.sale_id = fp.sale_id
		WHERE ps.sale_status != "판매완료"
		<if test="area != '전체' and area != null">
			AND ps.sale_area = #{area}
		</if>
		<if test="prediction != 'null'">
			AND ps.sale_cate = #{prediction}
		</if>
		GROUP BY
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price
		ORDER BY ps.sale_regdate DESC
		LIMIT #{offset}, #{limit}
	</select>

	<!-- 상품리스트출력 -->
	<select id="productCateList" resultType="java.util.Map"
		parameterType="hashmap">
		SELECT
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price,
		ps.sale_area,
		ps.sale_regdate,
		ps.sale_viewcount,
		MAX(pi.productimg_url) AS
		productimg_url,
		MAX(pi.productimg_alias) AS productimg_alias,
		COUNT(DISTINCT fp.member_id) AS favorite_count
		FROM
		product_sale ps
		LEFT
		OUTER JOIN
		product_image pi ON ps.sale_id = pi.sale_id
		LEFT OUTER JOIN
		favorite_product fp ON ps.sale_id = fp.sale_id
		WHERE 1=1 <!-- 기본 조건, 항상 참 -->
		<if test="area != '전체' and area != null and area != ''">
        	AND ps.sale_area = #{area}
    	</if>
		<if test="category != null">
			<if test="category == '전자제품'">
				AND ps.sale_cate in ( '디지털' ,'가전제품' )
			</if>
			<if test="category == '생활용품'">
				AND ps.sale_cate in ( '생활/주방용품', '공구/산업용품' , '가구/인테리어' )
			</if>
			<if test="category == '도서'">
				AND ps.sale_cate in ( '도서/티켓/문구', '예술/희귀/수집품' , '음반/악기' ,
				'스타굿즈' )
			</if>
			<if test="category == '의류'">
				AND ps.sale_cate in ( '여성의류', '남성의류' , '신발' , '가방/지갑' ,
				'패션 액세서리' ,
				'쥬얼리' , '시계')
			</if>
			<if test="category == '기타'">
				AND ps.sale_cate in ( '키덜트', '뷰티/미용' , '식품', '스포츠/레저' ,
				'유아동/출산' ,
				'차량/오토바이' , '반려동물용품' , '기타')
			</if>
		</if>
		<if test="keyword != null and keyword != ''">
        	AND ps.sale_name LIKE CONCAT('%', #{keyword}, '%')
    	</if>

		<if test="optionCate != null">
			<choose>
				<when test="optionCate == '전자제품'">
					AND ps.sale_cate in ( '디지털' ,'가전제품' )
				</when>
				<when test="optionCate == '생활용품'">
					AND ps.sale_cate in ( '생활/주방용품', '공구/산업용품' ,
					'가구/인테리어' )
				</when>
				<when test="optionCate == '도서'">
					AND ps.sale_cate in ( '도서/티켓/문구', '예술/희귀/수집품' ,
					'음반/악기' , '스타굿즈' )
				</when>
				<when test="optionCate == '의류'">
					AND ps.sale_cate in ( '여성의류', '남성의류' , '신발' ,
					'가방/지갑' , '패션 액세서리' ,
					'쥬얼리' , '시계')
				</when>
				<when test="optionCate == '기타'">
					AND ps.sale_cate in ( '키덜트', '뷰티/미용' , '식품',
					'스포츠/레저' , '유아동/출산' ,
					'차량/오토바이' , '반려동물용품' , '기타')
				</when>
				<otherwise>
					AND ps.sale_cate = #{optionCate}
				</otherwise>
			</choose>
		</if>
		GROUP BY
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price
		<if test="optionType != null">
			<if test="optionType == '가격낮은순'">
				ORDER BY ps.sale_price ASC
			</if>
			<if test="optionType == '가격높은순'">
				ORDER BY ps.sale_price DESC
			</if>
			<if test="optionType == '최신순'">
				ORDER BY ps.sale_regdate DESC
			</if>

		</if>
	</select>

	<!-- id 값에 해당하는 상품 list -->
	<select id="myProductList" resultType="java.util.Map"
		parameterType="string">
		SELECT
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price,
		ps.sale_area ,
		ps.sale_regdate,
		ps.sale_viewcount,
		MAX(pi.productimg_url) AS productimg_url,
		MAX(pi.productimg_alias) AS
		productimg_alias,
		COUNT(DISTINCT fp.member_id) AS favorite_count
		FROM
		product_sale ps
		LEFT OUTER JOIN
		product_image pi ON ps.sale_id =
		pi.sale_id
		LEFT OUTER JOIN
		favorite_product fp ON ps.sale_id =
		fp.sale_id
		where ps.member_id = #{member_id}
		GROUP
		BY
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price;
	</select>


	<!-- 상품 id에 해당하는 상품상세 -->
	<select id="myProductSaleId" resultType="ProductVO"
		parameterType="integer">
		SELECT * FROM product_sale WHERE sale_id = #{sale_id}
	</select>

	<!-- 상품수정 -->
	<update id="updateProduct" parameterType="ProductVO">
		UPDATE product_sale
		set
		sale_cate = #{sale_cate},
		sale_name = #{sale_name},
		sale_descript =
		#{sale_descript},
		sale_price = #{sale_price},
		sale_regdate = now(),
		sale_area = #{sale_area}
		WHERE sale_id = #{sale_id} AND member_id =
		#{member_id}
	</update>

	<!-- 상품 상태 수정 -->
	<update id="updateStatus" parameterType="ProductVO">
		UPDATE product_sale
		set
		sale_status = #{sale_status}
		WHERE sale_id = #{sale_id} AND member_id
		=
		#{member_id}
	</update>
	
	<!-- 구매 상품 등록 -->
    <insert id="insertProductBuy" parameterType="ProductBuyVO">
        INSERT INTO product_buy (buy_date, sale_id, member_id)
        VALUES (#{buyDate}, #{saleId}, #{memberId})
    </insert>

	<!-- 상품 삭제 -->
	<delete id="deleteProduct" parameterType="ProductVO">
		DELETE FROM
		product_sale
		WHERE sale_id = #{sale_id} AND member_id = #{member_id}
	</delete>

	<!-- member_id에 해당하는 찜 목록 출력 -->
	<select id="wishList" parameterType="string"
		resultType="java.util.Map">
		SELECT
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price,
		ps.sale_area ,
		ps.sale_regdate,
		MAX(pi.productimg_url) AS
		productimg_url,
		MAX(pi.productimg_alias) AS productimg_alias,
		COUNT(DISTINCT fp.member_id) AS favorite_count
		FROM
		product_sale ps
		LEFT
		OUTER JOIN
		product_image pi ON ps.sale_id = pi.sale_id
		RIGHT OUTER JOIN
		favorite_product fp ON ps.sale_id = fp.sale_id
		where fp.member_id =
		#{member_id}
		GROUP BY
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price
	</select>

	<!-- 유사상품 -->
	<select id="similarList" resultType="java.util.Map"
		parameterType="int[]">
		SELECT
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price,
		ps.sale_area,
		ps.sale_regdate,
		ps.sale_viewcount,
		MAX(pi.productimg_url) AS
		productimg_url,
		MAX(pi.productimg_alias) AS productimg_alias,
		COUNT(DISTINCT fp.member_id) AS favorite_count
		FROM
		product_sale ps
		LEFT
		OUTER JOIN
		product_image pi ON ps.sale_id = pi.sale_id
		LEFT OUTER JOIN
		favorite_product fp ON ps.sale_id = fp.sale_id
		WHERE
		ps.sale_id IN
		<foreach collection="array" item="id" open="(" separator=","
			close=")">
			#{id}
		</foreach>
		GROUP BY
		ps.sale_id,
		ps.sale_cate,
		ps.sale_name,
		ps.sale_status,
		ps.sale_price
	</select>
	
	<select id="countItems" resultType="int">
        SELECT COUNT(*) 
    	FROM product_sale  
    	WHERE sale_status != "판매완료"
    	<if test="area != null and area != '전체'">
        	AND sale_area = #{area}
    	</if>
    	<if test="prediction != 'null'">
			AND sale_cate = #{prediction}
		</if>
    </select>
    
    <!-- 조회수 productViewCountUpdate  -->
    <update id="productViewCountUpdate" parameterType="integer">
		UPDATE product_sale
		SET sale_viewcount = sale_viewcount + 1
		WHERE sale_id = #{sale_id};
	</update>
    




</mapper>